import os
import os.path
import argparse

from FileUtility import *

# create an ArgumentParser object
parser = argparse.ArgumentParser()
# add an argument for the camera ID (-i or --camera-id)
parser.add_argument('-oci','--override-camera-id', help='Set the camera ID brutally, ignoring other information. \n This is a dangerous action, be sure you know what you are doing.', default = None)

parser.add_argument('-s','--source-folder', help='Set the source folder. If not set, the default is current folder', default = None)
parser.add_argument('-d','--destination-folder', help='Set the destination folder. If not set, it will be the same with the source folder', default = None)

parser.add_argument('-r','-recover','--recover-original-filenames', action='store_true', help='Reset the file names to original', default=False)

parser.add_argument('-l','-list','--list-files', action='store_true', help='List the files in the folder', default=False)

parser.add_argument('-p', '--process', action='store_true', help='Process the files in the folder', default=False)

parser.add_argument('-m', '--merge-airdrop-sub-folders', action='store_true', help='Merge the sub-folders generated by Airdrop in the folder', default=False)
parser.add_argument('-mf', '--merge-sub-folders', action='store_true', help="Merge all the sub-folders in the folder", default=False)

#parser.add_argument('-tso', '--time-stamp-offset', help='Set the time stamp offset in seconds', default = None)
parser.add_argument('-sts', '--source-time-stamp', help='Set the source time stamp format', default = None)
parser.add_argument('-dts', '--destination-time-stamp', help='Set the destination time stamp format', default = None)

parser.add_argument('-umt', '--use-modified-time', action='store_true', help='Use the modified time of the file instead of creation time for new file name', default=False)
# The format of the time stamp is:
# YYYY-MM-DD_HH-MM-SS-TT.*


# parse the command-line arguments
args = parser.parse_args()
overrideCameraID = args.override_camera_id

sourceFolder = None
destinationFolder = None

sourceTimeStamp = None
destinationTimeStamp = None
timeStampOffset = None

isUseModifiedTime = False

if args.source_folder is None:
    sourceFolder = os.getcwd()
else:
    sourceFolder = args.source_folder

if args.destination_folder is None:
    destinationFolder = sourceFolder
else:
    destinationFolder = args.destination_folder

if args.source_time_stamp is not None:
    sourceTimeStamp = args.source_time_stamp
if args.destination_time_stamp is not None:
    destinationTimeStamp = args.destination_time_stamp

if args.use_modified_time:
    isUseModifiedTime = True
   
print("Processing started...")
print("Source folder: " + sourceFolder)
print("Destination folder: " + destinationFolder)

if args.list_files:
    checkFilesInFolder(sourceFolder, printDetailedList=True)

if args.merge_airdrop_sub_folders:
    if isThereAirdropSubFolder(sourceFolder):
        print("Start merging the Airdrop subfolders in the folder: " + sourceFolder)
        mergeAirdropSubFolders(sourceFolder, destinationFolder)
        sourceFolder = destinationFolder
if args.merge_sub_folders:
    if isThereSubFolder(sourceFolder):
        print("Start merging all the subfolders in the folder: " + sourceFolder)
        mergeSubFolders(sourceFolder, destinationFolder)
        sourceFolder = destinationFolder

if destinationTimeStamp is not None and sourceTimeStamp is not None:
    # modify the creation time of the files in the folder to deal with the wrong time stamp caused by the camera setting.
    print("Start changing the creation time of the files in the folder: " + sourceFolder)
    print("From: " + sourceTimeStamp + " to: " + destinationTimeStamp)
    print("The rest files will use the same time stamp offset.")
    changeFileCreationTimeInFolder(sourceFolder, sourceTimeStamp, destinationTimeStamp)

if args.recover_original_filenames:
    # reset the file name to the original name in the folder
    print("Start recover the video filename to the original name from: \n"
          + sourceFolder + "\n to: \n" + destinationFolder)
    restoreOriginalFilenamesInFolder(sourceFolder, destinationFolder)
elif args.process:
    deleteTrashFiles(sourceFolder)
    # rename the video file name to the formatted name in the folder
    print("Start renaming the video filename to the formatted name from: \n" 
          + sourceFolder + "\n to: \n" + destinationFolder)
    renameMediaFilesInFolder(sourceFolder, 
                             destinationFolder, 
                             overrideCameraID, 
                             defaultCameraID="Cid")    